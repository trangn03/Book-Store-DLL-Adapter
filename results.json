{
   "output": "***** Tests Summary *****\n[Print] 2 / 2\n[Basic list] 15 / 15\n[List assignment] 7 / 7\n[Reverse] 3 / 3\n[Iterators] 10 / 10\n[Stock/Sales] 13 / 13\n\nTotal: 50 / 50\n",
   "stdout_visibility": "visible",
   "tests": [
      {
         "max_score": 2,
         "name": "Print",
         "output": "[Print][Info] Print tests :: Adjusting points possible to 1\n[Print][Info] Basic store printout :: Adjusting points possible to 2\n[Print][Pass] Adjusting points 0 ==> 1 (1): Basic store printout :: TRUE\n[Print][Pass] Adjusting points 1 ==> 2 (1): Print tests :: No exception caught.\n",
         "score": 2
      },
      {
         "max_score": 15,
         "name": "Basic list",
         "output": "[Basic list][Info] Basic add/remove tests :: Adjusting points possible to 1\n[Basic list][Info] Checking random access :: Adjusting points possible to 2\n[Basic list][Pass] Adjusting points 0 ==> 1 (1): Checking random access :: TRUE\n[Basic list][Info] Checking random access :: Adjusting points possible to 3\n[Basic list][Pass] Adjusting points 1 ==> 2 (1): Checking random access :: TRUE\n[Basic list][Info] Checking random access :: Adjusting points possible to 4\n[Basic list][Pass] Adjusting points 2 ==> 3 (1): Checking random access :: TRUE\n[Basic list][Info] Checking size :: Adjusting points possible to 5\n[Basic list][Pass] Adjusting points 3 ==> 4 (1): Checking size :: TRUE\n[Basic list][Info] Checking size after arbitrary insertions :: Adjusting points possible to 6\n[Basic list][Pass] Adjusting points 4 ==> 5 (1): Checking size after arbitrary insertions :: TRUE\n[Basic list][Info] Checking arbitrary insertion :: Adjusting points possible to 7\n[Basic list][Pass] Adjusting points 5 ==> 6 (1): Checking arbitrary insertion :: TRUE\n[Basic list][Info] Checking arbitrary insertion :: Adjusting points possible to 8\n[Basic list][Pass] Adjusting points 6 ==> 7 (1): Checking arbitrary insertion :: TRUE\n[Basic list][Info] Checking size after push front/back :: Adjusting points possible to 9\n[Basic list][Pass] Adjusting points 7 ==> 8 (1): Checking size after push front/back :: TRUE\n[Basic list][Info] Checking value after push front :: Adjusting points possible to 10\n[Basic list][Pass] Adjusting points 8 ==> 9 (1): Checking value after push front :: TRUE\n[Basic list][Info] Checking value after push back :: Adjusting points possible to 11\n[Basic list][Pass] Adjusting points 9 ==> 10 (1): Checking value after push back :: TRUE\n[Basic list][Info] Checking value at front() :: Adjusting points possible to 12\n[Basic list][Pass] Adjusting points 10 ==> 11 (1): Checking value at front() :: TRUE\n[Basic list][Info] Checking value at back() :: Adjusting points possible to 13\n[Basic list][Pass] Adjusting points 11 ==> 12 (1): Checking value at back() :: TRUE\n[Basic list][Pass] Adjusting points 12 ==> 13 (1): Basic add/remove tests :: No exception caught.\n[Basic list][Info] Checking assign() :: Adjusting points possible to 14\n[Basic list][Info] Checking assign() method :: Adjusting points possible to 15\n[Basic list][Pass] Adjusting points 13 ==> 14 (1): Checking assign() method :: TRUE\n[Basic list][Pass] Adjusting points 14 ==> 15 (1): Checking assign() :: No exception caught.\n",
         "score": 15
      },
      {
         "max_score": 7,
         "name": "List assignment",
         "output": "[List assignment][Info] List assignment tests :: Adjusting points possible to 1\n[List assignment][Info] Assignment operator should work :: Adjusting points possible to 2\n[List assignment][Pass] Adjusting points 0 ==> 1 (1): Assignment operator should work :: TRUE\n[List assignment][Info] Copy constructore should work :: Adjusting points possible to 3\n[List assignment][Pass] Adjusting points 1 ==> 2 (1): Copy constructore should work :: TRUE\n[List assignment][Info] Comparison operator check :: Adjusting points possible to 4\n[List assignment][Pass] Adjusting points 2 ==> 3 (1): Comparison operator check :: TRUE\n[List assignment][Info] Inequality operator check :: Adjusting points possible to 5\n[List assignment][Pass] Adjusting points 3 ==> 4 (1): Inequality operator check :: Assertion is false\n[List assignment][Info] Comparison operator check :: Adjusting points possible to 6\n[List assignment][Pass] Adjusting points 4 ==> 5 (1): Comparison operator check :: Assertion is false\n[List assignment][Info] Inequality operator check :: Adjusting points possible to 7\n[List assignment][Pass] Adjusting points 5 ==> 6 (1): Inequality operator check :: TRUE\n[List assignment][Pass] Adjusting points 6 ==> 7 (1): List assignment tests :: No exception caught.\n",
         "score": 7
      },
      {
         "max_score": 3,
         "name": "Reverse",
         "output": "[Reverse][Info] Reverse tests :: Adjusting points possible to 1\n[Reverse][Info] Correctly reverse a list :: Adjusting points possible to 3\n[Reverse][Pass] Adjusting points 0 ==> 2 (2): Correctly reverse a list :: TRUE\n[Reverse][Pass] Adjusting points 2 ==> 3 (1): Reverse tests :: No exception caught.\n",
         "score": 3
      },
      {
         "max_score": 10,
         "name": "Iterators",
         "output": "[Iterators][Info] Iterator tests :: Adjusting points possible to 1\n[Iterators][Info] Postfix iterator increment :: Adjusting points possible to 2\n[Iterators][Pass] Adjusting points 0 ==> 1 (1): Postfix iterator increment :: TRUE\n[Iterators][Info] Prefix iterator increment :: Adjusting points possible to 3\n[Iterators][Pass] Adjusting points 1 ==> 2 (1): Prefix iterator increment :: TRUE\n[Iterators][Info] Iterator addition assignment :: Adjusting points possible to 4\n[Iterators][Pass] Adjusting points 2 ==> 3 (1): Iterator addition assignment :: TRUE\n[Iterators][Info] Iterator subtraction assignment :: Adjusting points possible to 5\n[Iterators][Pass] Adjusting points 3 ==> 4 (1): Iterator subtraction assignment :: TRUE\n[Iterators][Info] Postfix iterator decrement :: Adjusting points possible to 6\n[Iterators][Pass] Adjusting points 4 ==> 5 (1): Postfix iterator decrement :: TRUE\n[Iterators][Info] Prefix iterator decrement :: Adjusting points possible to 7\n[Iterators][Pass] Adjusting points 5 ==> 6 (1): Prefix iterator decrement :: TRUE\n[Iterators][Info] Iterator assignment and comparison operators :: Adjusting points possible to 8\n[Iterators][Pass] Adjusting points 6 ==> 7 (1): Iterator assignment and comparison operators :: TRUE\n[Iterators][Info] Iterators should not be equal after has is advanced :: Adjusting points possible to 9\n[Iterators][Pass] Adjusting points 7 ==> 8 (1): Iterators should not be equal after has is advanced :: TRUE\n[Iterators][Info] Depleted iterator should become end() :: Adjusting points possible to 10\n[Iterators][Pass] Adjusting points 8 ==> 9 (1): Depleted iterator should become end() :: TRUE\n[Iterators][Pass] Adjusting points 9 ==> 10 (1): Iterator tests :: No exception caught.\n",
         "score": 10
      },
      {
         "max_score": 13,
         "name": "Stock/Sales",
         "output": "[Stock/Sales][Info] Account balance tests :: Adjusting points possible to 2\n[Stock/Sales][Info] Correct balance after adding initial books :: Adjusting points possible to 3\n[Stock/Sales][Pass] Adjusting points 0 ==> 1 (1): Correct balance after adding initial books :: TRUE\n[Stock/Sales][Info] Correct balance after adding new book :: Adjusting points possible to 4\n[Stock/Sales][Pass] Adjusting points 1 ==> 2 (1): Correct balance after adding new book :: TRUE\n[Stock/Sales][Info] Correct stock on newly added book :: Adjusting points possible to 5\n[Stock/Sales][Pass] Adjusting points 2 ==> 3 (1): Correct stock on newly added book :: TRUE\n[Stock/Sales][Info] Correct balance after adding more of an existing book at a different price :: Adjusting points possible to 6\n[Stock/Sales][Pass] Adjusting points 3 ==> 4 (1): Correct balance after adding more of an existing book at a different price :: TRUE\n[Stock/Sales][Info] Correct stock after adding 2 more :: Adjusting points possible to 7\n[Stock/Sales][Pass] Adjusting points 4 ==> 5 (1): Correct stock after adding 2 more :: TRUE\n[Stock/Sales][Info] Should find exception if we oversell :: Adjusting points possible to 8\n[Stock/Sales][Pass] Adjusting points 5 ==> 6 (1): Should find exception if we oversell :: Caught exception ==> Does not have enough book\n[Stock/Sales][Info] Correct balance after selling some books :: Adjusting points possible to 9\n[Stock/Sales][Pass] Adjusting points 6 ==> 7 (1): Correct balance after selling some books :: TRUE\n[Stock/Sales][Info] Adjust account balance :: Adjusting points possible to 10\n[Stock/Sales][Pass] Adjusting points 7 ==> 8 (1): Adjust account balance :: TRUE\n[Stock/Sales][Info] Adjust account balance :: Adjusting points possible to 11\n[Stock/Sales][Pass] Adjusting points 8 ==> 9 (1): Adjust account balance :: TRUE\n[Stock/Sales][Info] Calling bookExists() on existing book :: Adjusting points possible to 12\n[Stock/Sales][Pass] Adjusting points 9 ==> 10 (1): Calling bookExists() on existing book :: TRUE\n[Stock/Sales][Info] Calling bookExists() on non-existing book :: Adjusting points possible to 13\n[Stock/Sales][Pass] Adjusting points 10 ==> 11 (1): Calling bookExists() on non-existing book :: Assertion is false\n[Stock/Sales][Pass] Adjusting points 11 ==> 13 (2): Account balance tests :: No exception caught.\n",
         "score": 13
      }
   ]
}